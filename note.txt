alias viens33='vi /etc/sysconfig/network-scripts/ifcfg-ens33'

mysql grant all on *.* to 'test_1'@'localhost' identified by '123456'; 修改test_1密码，测试有效
mysql SET PASSWORD FOR 'test_1'@'localhost' = PASSWORD('123456789');	修改密码命令2,测试有效
mysql alter user 'test_1'@'localhost' identified by '123456';	修改密码命令3,测试有效
mysql desc test; 查询表的字段信息，了解后可以读取想要的信息
mysql select * from user;	读取所有表的内容，*可改成某些字段，逗号分隔

mysql create table test(id int,name varchar(20));		创建一个表
mysql insert into test value(3,'tany');		往表内插入信息
mysql update test set name='jing' where id=3;	修改信息
mysql delete from test where id = 3;		删除一行
mysql drop table test;			删除表
mysql show grants for 'zab'@'127.0.0.1';	查看一个用户的权限
mysql show grants;			查看当前用户权限；
mysql select Host,User from user;			查看mysql数据库的user表，显示了用户名和用户应连接的Host
mysql drop user 'yangxin'@'localhost';		删除用户
mysql rename user 'test3'@'%' to 'test1'@'%';		修改帐户和host
cat -A /etc/passwd #显示全部字符；
cat -n /etc/passwd #显示行数；
lsattr
chattr -i
chattr +a #可touch，可追加；
chmod u+s  #给二进制文件添加管理员权限；
chmod g+s #给二进制文件添加管理员属组权限；目录加上s权限之后，之后所有生成的目录和文件的属主跟原目录一样，可让这个目录属于某一个组；
chmod o+t #给/tmp这样的公共目录，谁的东西谁作主，别人不能删除；
find /etc -type d -name "sshd*"
find /etc -type f -mtime -1 #1天以内；
find / -inum 33583395 #查找硬链接；
find /root -type f -mmin -60 #60分钟以内；
find /root -size -10k -exec ls -lh {} \;
find /opt /usr /var -name foo.scala -type f     # search multiple dirs
find . -type f \( -name "*.c" -o -name "*.sh" \)                       # *.c and *.sh files  
find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)   # three patterns
find . -type f -not -name "*.html"                                # find all files not ending in ".html"  
find . -type f -name "*.java" -exec grep -l StringBuffer {} \;    # list the file name which have "StringBuffer";
find . -type f -name "*.gz" -exec zgrep 'GET /foo' {} \;          # search for a string in gzip files;
groupadd -g 1010 gt #指定组号添加组；
groupdel gt
useradd ut #新建用户，自动生成一样的组名，一般情况下gid跟uid一致；
useradd -u 1004 -g grp2 user3 #指定uid 和组(组名或组号） 新建用户；
useradd -u 1004 -g grp2 -d /home/tan -s /sbin/nologin user4 #-d指定家目录，-s指定用户的shell（不能登陆）；
useradd -M user5 #不建家目录；
userdel user8 #删除配置文件，不删除家目录;
userdel -r user7 #删除用户同时删除家目录；
usermod -u 1010 username #修改uid
usermod -g 1010 username #修改gid(主组）
usermod -d /home/kdjjf username #修改用户家目录，目录里内容要添加，不然用户使用有问题；
usermod -s /sbin/nologin username #修改用户的shell(不能登陆）
id user1 #查看用户的ID和组信息；
usermod -G grp2, user5 username #指定扩展组，指定一个扩展组后，再指定一个扩展组，原来的会被替换，要同时指定需要的多个扩展组；
passed -l user1 #锁定密码
passwd -u user1 #解锁
usermod -L user1 #锁定，加了一个!在密码字段的最前面
usermod -U user1 #解锁
passwd --stdin user5 #修改密码，明文显示，只输入一次；
echo "111222" |passwd --stdin user5 #一条命令修改好命令；
echo -e "12312312\n12312312" |passwd user3 #一条命令修改密码，输入了两次密码；
yum install -y expect #安装expect
mkpasswd -l 12 -s 0 #使用mkpasswd命令，-l 指定密码长度，-s 指定多少位特殊符号
visudo
visudo "root ALL=(ALL) NOPASSWD: /usr/bin/ls, usr/bin/cat" #配置文件样例；
mkfs
mke2fs -b 8192 /dev/sdb1 #8k的块，适合存储视频，图片；
mke2fs -b 2048 /dev/sdb1 #2K的小块，适合存储大量小文件；
-m 预留空间，reserved for the super user
mke2fs -m 0.1 /dev/sdb1 #可以只预留0.1;
mke2fs -i 8192 -t ext4 /dev/sdb1 #1个inode对应少一点空间，有更多inode,一般inode对应16K;
blkid #查看所有块设备；
mount -o rw /dev/sdb #读写；
mount -o ro /dev/sdb #只读；
mount -o remount /dev/sdb #重新挂载；
mount -o remount, ro /dev/sdb
swap dd if=/dev/zero of=/tmp/newdisk bs=1M count=100 #dd用于复制文件，从/dev/zero复制零到/tmp/newdisk(块大小为1M，数量100)
mkswap -f /tmp/newdisk #格式化；
swapon /tmp/newdisk #把swap挂载；
swapoff /tmp/newdisk #卸载
gzip
gzip -d #解压；
gzip -c #新建压缩文件；
bzip2
bzip2 -d
bzip2 -c #新建压缩文件；
xz 
xz -d
xz -c #新建压缩文件;
zip 1.txt.zip 1.txt
zip -r 123.zip 123/
unzip 1.txt.zip
unzip dir1.zip -d ~/  #解压缩到指定路径；
tar -cvf dir3.tar --exclude dir3/1.txt --exclude dir3/2.txt dir3 1.txt		#多个不打包的文件，要逐一列出来；
tar -tf aming.tar #list content;
rpm -ql
yum grouplist
yum groupinstall
yum info 
yum clean all
yum repolist all
yum install zsh --downloadonly
yum install zsh --downloadonly --downloaddir=/tmp/
ldd /bin/ls
yumdownloader
yum install -y bash-completion
cut -c 1 #截取第1个字符
sort -n #按数字大小排；
sort
sort -r #反向
wc -l统计行数
wc -m统计字符数，包括换行符和tab;
wc -w 统计单词数，单词以空格和换行分格
uniq, 去除连续重复的行；（跟sort一起使用）；-c统计重复个数；
split -b 1K a.txt	#以1K的大小切割文件，连原文件共762个文件，自动命名；
split -b 1K a.txt as.		#指定前缀命名；
split -l 1000 a.txt	#以每1000行分隔文件；
[ -d dira ] && mkdir dirb	#第一条命令成功，执行第二条命令；第一条命令不成功，第二条命令不执行；相当于两条命令同命相连；
[ -d dirc ] || mkdir dirc		#||表示或者，第一条命令结果为1，第二条命令就不执行；第一条命令结果为0，执行第二条命令，二选一；
grep -c 行数
grep -i 不区分大小写
grep -n 显示行号
grep -v 取反
grep -r 遍历所有子目录
grep -A -B -C 下面 上面 上下一起
grep r.o 代表查找的关键词是三个字符，其中.代表所有字符包括空格和符号;
grep o* 代表查找的关键词是o，0个或以上的o都符合条件;
grep oo* 代表查找的关键词是o+o*,一个或以上的o符合条件；
grep ro* 代表查找的关键词是r+o*，r加上0个或以上的o都符合条件；
grep .* 代表任意个任意字符，前后加内容使用更方便；
grep o{2} 代表带两个相连的o都符合条件；
grep ro+ 代表r加上一个或以上的o符合条件；+要用egrep使用；
grep ro 代表有一个ro符合条件，跟上面的高亮不一样；
grep ro? 代表r加上0个或1个o符合条件,r, ro符合条件；?要用egrep使用；
grep root|bash 代表带其中一个关键词的行符合条件；|要用egrep使用；
grep (oo){2} 代表连续两个oo相连符合条件，带oooo符合条件；（）要用egrep使用； 
sed -n '5'p test.txt
sed -n '1,5'p test.txt
sed -n  '/root/'p passwd	#匹配root的正则，-n禁止打印无关内容, p把内容打印出来；
sed -n -e '/sh$/'p -e '1,3'p  passwd		#-e指定多个条件,同时生效的行，会打印2次；
sed -n -e '/nfs/'Ip  passwd		#I不区分大小写；
sed '1,3'd passed #去除1-3行，后显示内容；
sed '1,2s/ot/to/g' passwd #1-2行中所有ot改成to显示出来；
sed -r 's/([^:]*):(.*):([^:]*)/\3:\2:\1/' passwd		#第一段与最后一段的替换，\3 \2\1代表前面的小括号内容，-r可以识别扩展符号例如(), +;
sed /sbin/nologin:x:1:1:bin:/bin:bin #上面命令的结果；
sed 's/^.*$/111&/g' -i passwd		#&代表查找出来的内容，这里是全部匹配，在行前面加上111, -i把内容写入文件;
sed 111bin:x:1:1:bin:/bin:/sbin/nologin #上面命令的结果；
sed 's/([0-9]+)(.*)/\2/' -i my_lish.h			#可以把文件所有行码去除，用空格分开的文字；
awk -F ':' '{print $1":"$3,$4}' passwd	#-F指定分隔符:，打印出每行的第一第三第四段，打印格式用双引号添加分隔符，以逗号分隔用空格分隔；$0为所有段；
awk -F ':' '$6 ~ /home/ {print $1,$3,$4} /mysql/ {print $1,$3,$4}' passwd	#同时判断了两个条件，条件1:第六段$6匹配home, 条件2:整句匹配mysql;一个条件满足都会打印；
awk -F ':' '$3>1010 {print $1,$3,$4}' passwd	#可以使用等于==，大于，小于，不等于!=作判断，数字加上双引号判断为字符以ASCII排序;
awk -F ':' '$7!="/sbin/nologin" {print $1,$3,$4}' passwd #用字符判断；
awk -F ':' '$3==$4 && $3>=1000 {print $1,$3,$4} ' passwd	#字段比较，&&同时满足前后两个条件；
awk -F ':' '$3!=$4 || $3==0 {print $1,$3,$4} {OFS=":"}' passwd	#||或者，OFS定义输出格式分格符，不用一个个写出来；
awk -F ':' '{print NR":"NF}' passwd	#打印每一行的行号NR和段数NF；
awk -F ':' 'NR>40 || NR==1' passwd		#NF,NR作为条件使用；
awk -F ":" '{(tot=tot+$3)} END {print tot}' passwd		#循环语句，没有END遍历一行就print一次tot;END类似continue;
awk -F ":" 'NR>7 {print $(NR/7)":"NR":"$NF}' passwd	#$加数字是第几段；
tail -3 passwd |awk -F ":" '$3="root"'					#对第三段赋值；cat file.txt | awk '{ if ($7~/'"$i"'/) {print $0} }'| wc -l ; #用选取一段匹配另外一个变量；
command audit  #https://blog.csdn.net/tanyyinyu/article/details/100945326
sar -n DEV 1 10		#-n显示网络相关信息，DEV按网卡列出，1代表1秒刷一次，10代表显示10个结果；
sar -n DEV -f /var/log/sa/sa16 #-f从文件里读取信息，命令的前半部分跟查看网络实时信息一样；
sar -q 1 10 #查看实时负载情况；
sar -q -f /var/log/sa/sa16 #从文件里查看负载情况；
ar -b 1 10 #查看实时磁盘情况；
sar -b -f /var/log/sa/sa16 #从文件里查看磁盘情况；
cat /var/log/sa/sar16 #sardd文件可以直接用cat查看；
network nload
iostat -dx		#-d不显示cpu相关信息，-x显示详细信息，不带参数显示简单信息；
iostate -dx 1 10 #动态显示10次，不带10一直动态显示；
iotop
ps -elf
ps -eLf #查看线程的命令；
ps -elf #跟 ps aux差不多；
ss -an
ss -an |grep -i listen
tcpdump -nn -i ens33 #-nn以数字形式显示IP和端口，-i指定网卡，侦听网卡的数据；
tcpdump -nn -i ens33 port 80 #指定侦听端口，可以查看指定服务的数据；
tcpdump -i ens33 -nn not port 22 and port 80 and not host 192.168.31.101 #同时增加几个条件；
tcpdump -nn -i ens33 -c 100 -w 1.cap #-c指定抓包的数量；-w将抓包内容写到文件里，文件不能直接cat;
tcpdump -nn -r 1.cap #-nn也起作用，读取抓包文件，也可以让wireshark分析；
tshark -i ens33 -n -t a -R http.request -T fields -e "frame.time" -e "ip.src" -e "http.host" -e "http.request.method" -e "http.request.uri"			 #-t a抓包的时间；-R指定的过滤条件是http请求；-T指定输出格式，内容跟在-e后面，时间，源，域名，请求方法，请求的链接；
network mii-tool ens33
network ethtool ens33
echo -e "\033[30m 黑色字 \033[0m"
echo -e "\033[31m 红色字 \033[0m"
echo -e "\033[32m 绿色字 \033[0m"
echo -e "\033[33m 黄色字 \033[0m"
echo -e "\033[34m 蓝色字 \033[0m"
echo -e "\033[35m 紫色字 \033[0m"
echo -e "\033[36m 天蓝字 \033[0m"
echo -e "\033[37m 白色字 \033[0m"
iptables -F #清空配置，运行后生效，重启恢复默认；
service iptabes save #运行后目前配置保存为默认；
yum install -y iptables-services #安装iptables-services;
iptables -nvL #查看目前iptables设置；
iptables -A INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP #-A新增规则，-s源IP，-p协议类型, --sport 1234源端口1234, -d接目的IP, --dport 80目的端口80, 符合前面条件的, -j DROP丢弃包；
iptables -I INPUT -p tcp --dport 80 -j DROP #-I添加规则在第一行；指定端口必须要指定-p;
iptables -D INPUT -p tcp --dport 80 -j DROP #-D删除一条规则，具体内容跟你增加时一样；
iptables -nvl --line-number #查看规则编号，可按编号删除；
iptables -D INPUT 7 #删除INPUT中编号7规则；
iptables -I INPUT -s 192.168.1.0/24 -i eth0 -j ACCEPT #-i接收包的网卡；
iptables -P OUTPUT DROP #-P修改链的默认策略，OUTPUT链全盘丢弃，如果ssh连接中，连接会中断；-P设置会变成默认的一部分，除非另外修改，-F不能清除；
iptables -P OUTPUT ACCEPT #OUTPUT改成接受；
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT   #开放的端口连接后，与这些服务相关的，建立连接的其他通信放行，没有这句可能会有问题；
iptables -I INPUT -p icmp --icmp-type 8 -j DROP  #ping出去，不被ping的设置;
route add default gw 192.168.100.1 		#设置网关为机器A的内网网卡IP；
#route - show / manipulate the IP routing table，修改影响力是很大的，设置这个后原来网卡配置文件的网关可能没用了，会导致一些问题，如ping不通外网，要比较注意，查找问题会比较麻烦。
route -n  #查看网关；
echo "1" > /proc/sys/net/ipv4/ip_forward  #开启转发；
iptables -t nat -A POSTROUTING -s 192.168.100.100 -o ens33 -j MASQUERADE  #转发设置 
iptables -t nat -A PREROUTING -d 192.168.133.130 -p tcp --dport 1122 -j DNAT --to 192.168.100.100:22		#设置访问A外网IP1122端口转发到电脑B的22端口；
iptables -t nat -A POSTROUTING -s 192.168.100.100 -j SNAT --to 192.168.133.130		#设置电脑B的IP发出的包，改成为电脑A外网IP，跟A1122端口通信等于跟B通信；
service iptables save	#会把规保存到/etc/sysconfig/iptables;
service iptables restart		#重启后从配置文件里加载配置；
iptables-save > ipt.txt		#把配置文件保存在自定义文件里；
iptables-restore < ipt.txt		#从文件恢复规则；
iptables-save -t nat > ipt2.txt
iptables-restore < ipt2.txt
firewall-cmd --get-default-zone
firewall-cmd --get-zones		#查看所有zones;
firewall-cmd --get-zone-of-interface=ens33
firewall-cmd --get-active-zones  	#查看活动的zone和对应的接口;
firewall-cmd --set-default-zone=block  ##修改default-zone，原来public-zone网卡受影响；
firewall-cmd --zone=public --add-interface=lo		#添加网卡到一个zone;
firewall-cmd --zone=dmz --change-interface=lo #改变网卡的zone;
firewall-cmd --zone=dmz  --remove-interface=lo		#从一个zone中删除网卡；
firewall-cmd --get-services 		#查看所有services;
firewall-cmd --zone=public --add-service=http #临时增加services，重启后需要重新添加;
firewall-cmd --zone=public --remove-service=http	 #删除services;
firewall-cmd --zone=public --add-service=http --permanent  #使用permanent参数后，修改更新在配置文件里，重启后也会加载；
firewall-cmd --zone=block --add-port=80/tcp		#添加端口；
firewall-cmd --zone=block --list-port		#列出zone的端口；
firewall-cmd --zone=block --remove-port=80/tcp
firewall-cmd --zone=public --add-port=8730/udp --permanent  
firewall-cmd --zone=public --add-port=8730/tcp --permanent  
firewall-cmd --reload 
firewall-cmd --zone=public --list-ports 
firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address="192.168.1.188" port port=20-21 protocol=tcp accept'	#开通某一个IP访问20-21端口；
firewall-cmd --permanent --add-rich-rule='rule protocol value=icmp drop'  #不能被ping的设置；
firewall-cmd --zone=public --add-masquerade --permanent  #外网网卡的zone添加masquerade;#转发；
firewall-cmd --remove-masquerade --permanent   #取消的命令
firewall-cmd  --direct --passthrough ipv4 -t nat -A POSTROUTING -o ens33 -s 172.16.92.0/24 -j MASQUERADE  #转发；
firewall-cmd --reload  #转发；
firewall-cmd --zone=public --add-forward-port=port=1122:proto=tcp:toport=22:toaddr=172.16.92.154 --permanent  #端口映射；
firewall-cmd --reload  #端口映射；
firewall-cmd --zone=public --remove-forward-port=port=1122:proto=tcp:toport=22:toaddr=172.16.92.154 --permanent   #取消的命令；
firewall-cmd --list-all #查看zone的所有规则；
firewall-cmd --list-all-zones	#查看所有zone的所有规则；
crontab -e		#打开一个类似vi的界面，按上面的格式逐行写下计划；
crontab -l		#查看计划；
crontab 1 3 */2 1-6 1,2,3,4,5  /bin/bash ~/123.sh	#1-6月,双数的日子的3时1分，周一到周五实施计划；
systemctl start crond		#启动计划；
systemctl status crond		#查看服务状态；
crontab -u user1 -l	#查看某个user的计划；
crontab /var/spool/cron/user1			#这个路径保存着计划的文件，可用于备份，以每个用户名为名；
crontab 1 3 */2 1-6 1,2,3,4,5  /bin/bash ~/123.sh >> 123.log	2>> 123e.log	#可以保存正确和错误信息；
rsync -avL	#-L把软链接的源文件同步到目的地；
rsync -avP	#-P显示同步过程，增加速率的显示；
rsync -avu	#-u目的地的文件版本比源版本新，则不更新；
rsync -avz 	#-z传输时压缩；
rsync -av --delete /tmp/rsyn1/ 172.16.92.142:/tmp/rsyn2/ #--delete删除目的地 中 源 没有的文件，原来是增量同步；
rsync -av --exclude "*.log" /tmp/rsyn1/ 172.16.92.142:/tmp/rsyn2/ #--exclude排除某些文件不同步；
rsync -av -e "ssh -p 1122" test1/ 192.168.133.132:/tmp/test2/  	#可以结合iptable nat表的应用，外网机器ssh内外网机器:1122 <-> 内网机器:22,可通过一台机器从外部访问只具内网连接的机器；
dmesg  #硬件相关日志，保存在内存
/var/log/dmesg  #系统启动记录的日志
last #登陆系统的记录 日志；
lastb  #登陆系统失败的记录 日志；
/var/log/secure  #登陆系统的相关信息 日志；
screen				#直接回车就进入了虚拟终端，在终端里的命令一直在运行，随时回到界面里查看；#退出ssh后也可再进入screen; #ctrl a组合键再按d退出虚拟终端，但不是结束;   
screen -ls 			#查看虚拟终端列表；  
screen -r id 		#进入指定的终端；
screen -S aming   #命名一个虚拟终端；
screen -r aming		#用名字恢复一个终端；
/usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/data/mysql &  #mysql启动；
killall mysqld #读写完再kill，安全
nginx rewrite if ( $host = blog.aminglinux.cc ) { rewrite /(.*)  http://www.aming.com/$1 permanent; }
nginx rewrite  if ( $host = www.tany.com ) { rewrite "^/(.*)$"  http://blog.tany.com/$1 permanent; } #状态码301; 
nginx rewrite /1.txt /2.txt redirect; #临时重定向，状态码302
nginx auth_basic "User Authentication";              ## 认证弹窗提示语
nginx auth_basic_user_file /etc/nginx/user_passwd;		#安装httpd-tools，命令htpasswd -c /etc/nginx/user_passwd user1创建第一个用户，再加用户的命令是htpasswd -m /etc/nginx/user_passwd user2;
nginx curl -x127.0.0.1:80 -uuser1:123456  blog.tany.com/jiami/s1.txt -I
nginx access_log /data/logs/blog.access.log main; #写在配置文件最后一行；
nginx location  ~* \.(png|jpeg|gif|js|css|bmp|flv)$ { access_log off; } #location到后缀为.png等文件；#对于上面这些文件，不记录日志；
logrotate -v  /etc/logrotate.d/nginx
logrotate -vf /etc/logrotate.d/nginx	#-f代表强制执行，-v可观察执行过程；
nginx location ~* \.(png|jpeg|gif|js|css|bmp|flv)$ { access_log off;	expires 1d; }
nginx location ~* \.(png|jpeg|gif|js|css|bmp|flv)$ { valid_referers none blocked blog.tany.com; if ($invalid_referer) {	return 403;	} }
nginx allow 127.0.0.1;	#白名单模式；deny all;
nginx deny 127.0.0.1;	#黑名单模式；
nginx location ~ .*(upload|image|attachment|cache)/.*\.(php|pl|py|jsp|asp|sh|cgi)$  { deny all; } 
nginx if ($http_user_agent ~ 'Spider/3.0|YoudaoBot|Tomato') { return 403；} #识别发送信息的浏览器，屏敝掉一些浪费流量的机器人；
nginx if ($request_uri ~ (abc|123)) { return 404;	}  ##限制指定的URL，带有abc或123的URL都返回404;
nginx server { listen 80 default_server; resolver 119.29.29.29; location / { proxy_pass http://$host$request_uri； } }#正向代理；
nginx server { listen       80; server_name  bbs.tany.com; location / { proxy_pass http://192.168.87.133; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } #反向代理；
nginx upstream ape_com     {         ip_hash;         server 115.159.51.96:80; #服务器IP与端口；         server 47.104.7.242:80;     }     server     {         listen 80;         server_name www.apelearn.com;  #服务器的域名；         location /         {             proxy_pass http://ape_com;   #upstream             proxy_set_header Host $host;             proxy_set_header X-Real-IP $remote_addr;             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;         }     } #负载均衡，权重定义server 115.159.51.96:80 weight=100;
nginx curl -k -H "host:bbs.aminglinux.cc" https://192.168.222.128/index.php #ssl curl;
echo quit | openssl s_client -showcerts -servername bbs.tany.com -connect bbs.tany.com:443 > cacert.pem #ssl 从网页生成ssl密钥;
curl --cacert cacert.pem https://bbs.tany.com -I #ssl curl;
ssl listen 443 ssl; ssl on;    ssl_certificate /etc/nginx/ssl/bbs.crt;    ssl_certificate_key /etc/nginx/ssl/bbs.key;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ;  #ssl设置
ssl upstream qq_com     {         server 192.168.87.133; #        server 192.168.87.134;     }     server     {   listen 443 ssl;         ssl_certificate /etc/nginx/ssl/bbs.tany.com/server.crt;         ssl_certificate_key /etc/nginx/ssl/bbs.tany.com/server.key;         ssl_protocols TLSv1 TLSv1.1 TLSv1.2;         server_name bbs.tany.com;         location /         {             proxy_pass http://qq_com;             proxy_set_header Host $host;             proxy_set_header X-Real-IP $remote_addr;             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;         } access_log /data/logs/daili.log main;     } #负载均衡 ssl网站；
ssl server {     listen 80;     server_name bbs.tany.com;       rewrite ^/(.*)$ https://${server_name}/$1 permanent;         }  #负载均衡 ssl网站 80转443；
nginx tcp stream {  log_format proxy '$remote_addr [$time_local] '                  '$protocol $status $bytes_sent $bytes_received '                  '$session_time "$upstream_addr" '                  '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"'; include /etc/nginx/conf.d/tcp/*.conf; #新增tcp目录，stream的主配置文件要放在tcp里； } #这是区别于nginx虚拟主机（http)的一个用法；在主配置文件/etc/nginx/etc/nginx.conf里要新增与http平衡的一个模块;
nginx tcp upstream stream_backend {          server 192.168.87.137:22;   #端口应该不是80就是代理端口的用法，使用stream模块，这个子配置文件放到http模块里会报错； }  server {         listen        1122;         proxy_pass    stream_backend; access_log  /data/logs/tcp.log  proxy; }  #子配置文件；
nginx tcp upstream 134 {        hash $remote_addr consistent;        server 192.168.1.134:22;     }     server {        listen 13422;        proxy_connect_timeout 10s;        proxy_timeout 300s;        proxy_pass 134;     }  #子配置文件2；
php socker fastcgi_pass unix:/tmp/bbs.socket; #socket
php www.conf错误日志 php_admin_value[error_log] = /var/log/fpm-php.www.log ;将错误保存在文件里，需要touch文件，权限要改为777,因为php需要写入; php_admin_flag[log_errors] = on  php_admin_value[error_reportion] = E_ALL ;添加语名，错误级别，将所有错误都保存，ini里有说明；
phpinfo <?php phpinfo(); ?>
php; slowlog = /tmp/php.slow request_slowlog_timeout = 1 ;php解释超过1秒就记录下来；
php pool多个网站；[bbs] user = php-fpm group = php-fpm listen = /tmp/bbs.socket ;据此配置nginx虚拟主机文件; listen.mode = 0666 pm = dynamic      pm.max_children = 5 pm.start_servers = 2 pm.min_spare_servers = 1 pm.max_spare_servers = 3 slowlog = /tmp/php.slow request_slowlog_timeout = 1 php_flag[display_errors] = off ;以下设置在ini文件可定义，优先级比pool文件低，在pool文件定义时，需要在前面加php_admin_flag/ php_admin_value，flag for on/off; php_admin_value[error_log] = /var/log/fpm-php.www.log php_admin_flag[log_errors] = on php_admin_value[error_reportion] = E_ALL php_admin_value[open_basedir] = /data/wwwroot/bbs.tany.com:/tmp ;限制php服务的活动空间，/tmp目录也需要，会生成一些临时文件；
mysql skip-grant #密码重置；
mysql update user set authentication_string=password("aming-linux") where user='root';#密码重置，5.7.36后,不一定成功；
mysql update user set password=password("aming-linux") where user='root'; #旧版本，密码重置；
mysql; show variables like 'slow%'; #查看slow参数；
mysql; show variables like 'long%'; #查看long参数；
mysql; slow_query_log = ON slow_query_log_file = /data/mysql/aminglinux01-slow.log long_query_time = 2 #慢查询设置；slow log 设置配置文件;
mysql; select sleep (5); #睡5秒；
mysql; show processlist; #查询所有查询；
mysql; show full processlist; #查询所有查询，显示完整命令；
mysql; mysql -uroot -pxxxx -e "show processlist" #不进去数据库，翻回查询结果；
ftp; yum install -y epel-release; yum install -y pure-ftpd
ftp; vi /etc/pure-ftpd/pure-ftpd.conf PureDB                        /etc/pure-ftpd/pureftpd.pdb       #使用文件存放用户和密码； MinUID                      1000                        #设置最小的使用ftp服务的用户UID；  useradd ftpuser                 #新增使用ftp的用户； mkdir /data/ftp                 #ftp的访问目录； chown ftpuser:ftpuser /data/ftp         #修改目录属主；  pure-pw useradd user1 -u ftpuser -d /data/ftp   #制作虚拟用户user1, 映射到用户ftpuser，要>输入密码; pure-pw mkdb            #生成密码文件，文件不能cat查看； pure-pw list                    #查看用户；  systemctl start pure-ftpd               #启动服务；
ftp测试；yum install -y lftp lftp user1@127.0.0.1  #进入ftp的目录； put 上传 mput 多个文件上传 get  mget mirror   镜像服务器  mirror -R  反向镜像 -c  断点续传 -n 线程
mysqladmin -uroot password 'baby123' #设置初始密码；
mysqladmin -uroot -p'baby123' password 'baby321'  #修改密码；
mysql; show create table tb_name\G; #建表语句；
mysql; select user(); #查看当前用户；
mysql; create table t1(`id` int(4), `name` char(40)) ENGINE=InnoDB DEFAULT CHARSET=utf8;   #修改字符集； #建表；
mysql; show status; show variables; show variables like 'max_connect%'; 
mysql; show grants;   #查看当前用户的权限；show grants for user2@192.168.133.1;  #显示一个用户在某个登陆IP的权限，可用于复制用户权限；
mysql; grant all on db1.* to 'user3'@'%' identified by 'passwd';   #user3不限制登陆IP；
mysql; grant all on *.* to 'user1' identified by 'passwd';  #可授权给所有IP；
select count(*) from mysql.user;    #查询user表的行数；
select * from mysql.db;   			#查询表的所有内容；尽量少做全匹配的操作，耗费资源；
select db from mysql.db;  		#显示db字段；
select db,user from mysql.db;   #显示两个字段；
select * from mysql.db where host like '192.168.%';   #模糊查找；
mysql; truncate table db1.t1;   #清空一个表；
mysqldump -uroot -p123456 -d mysql > /tmp/mysql.sql  #备份表结构;
innobackupex; rpm -ivh http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm
innobackupex;  yum install -y percona-xtrabackup-24.x86_64
nginx; if ($request_method = POST) { return 405; } #不允许此方法；
nginx; if (!-f $request_filename) { rewrite * ; }
nginx; if ($request_usr ~* 'gid=\d{9,12}/') { rewrite * } #gid=123456789/符合条件；
nginx; rewrite; break last意思是一样的，中断rewrite；
nginx; location; break 中断，last 匹配完再从上到下走一次；
nginx; return 直接使用在server {}段， return 403, 跟deny all是一样的；
nginx; return 使用在if 段里；
nginx; return 字符串； return 200 "error.";
nginx; return html代码； return 200 "<html><script>window.location.href='//$host$request_uri';</script></html>";
nginx; return 链接； return http://www.aminglinux.com/r.html; 类似rewrite, 也是302；
nginx; return 变量； return 200 "$args"; 显示出uri里的参数，即?后面；
nginx curl -A "kjlk" -x127.0.0.1:80 www.abc.com #指定agent;
nginx rewrite if return https://blog.csdn.net/tanyyinyu/article/details/102797072  细节
nginx 反向代理 location细节 buffer cache  https://blog.csdn.net/tanyyinyu/article/details/102811656
nginx curl -x127.0.0.1:80 --refer blog.tany.com http://bbs.tany.com/static/image/common/forum.gif -I -v #测试盗链接；
nginx 并发限制 http {     ...     limit_conn_zone $binary_remote_addr zone=aming:10m; #这三句直接放到http里(nginx.conf);     limit_conn_status 503; #限制时返回503;      limit_conn_log_level error;  #模块的错误日志级别；     ...     server     {         ...         limit_conn aming 2;         ...        } } 
nginx 并发限制 说明：首先用limit_conn_zone定义了一个内存区块索引aming，大小为10m，它以$binary_remote_addr作为key。 该配置只能在http里面配置，不支持在server里配置。  limit_conn 定义针对aming这个zone，并发连接为2个。在这需要注意一下，这个2指的是单个IP的并发最多为2个。
nginx 速度限制 location ~ /download/ { … limit_rate_after 512k; limit_rate 150k; … }
nginx 速度限制 说明：limit_rate_after定义当一个文件下载到指定大小（本例中为512k）之后开始限速； limit_rate 定义下载速度为150k/s。
nginx 共享内存限制域大小设置，设置请求处理频率 http {     limit_req_zone $binary_remote_addr zone=aming:10m rate=2r/s; #把这行放在http里；      server {         location  ^~ /download/ {               limit_req zone=aming burst=5;  #生产中burst建议足够大；         }     } }
nginx 共享内存限制域大小设置，设置请求处理频率 每秒处理2次，最多同时处理5个；
nginx 代理服务器 配置样版 http {     proxy_cache_path /data/nginx_cache/ levels=1:2 keys_zone=my_zone:10m inactive=300s max_size=5g;     ...;     server     {  proxy_buffering on;  proxy_buffer_size 4k;  proxy_buffers 2 4k;  proxy_busy_buffers_size 4k;  proxy_temp_path /tmp/nginx_proxy_tmp 1 2;  proxy_max_temp_file_size 20M;  proxy_temp_file_write_size 8k;    location /  {      proxy_cache my_zone;      ...;  }     } }
nginx 参数 启动脚本  https://blog.csdn.net/tanyyinyu/article/details/102857397
nginx ssl 优化 ssl_session_cache   shared:SSL:10m; //缓存为10M ssl_session_timeout 10m; //会话超时时间为10分钟  
nfs ;yum install nfs-utils -y;vi /etc/exports   #服务端需要配置配置文件；内容如下； /home/nfs 192.168.87.0/24(rw,sync,no_root_squash,anonuid=1000,anongid=1000) #具体说明如下； /home/nfs nfs服务的目录,可以说是共享的目录； 192.168.87.0/24  允许访问的IP范围； rw 允许读写；ro可设为主读； sync 同步模式，内存数据实时写入磁盘；async 非同步模式 no_root_squash 客户端挂载NFS共享目录后，root用户不受约束，权限很大；root_squash 与上面选项相对，客户端上的root用户收到约束，被限定成某个普通用户；all_squash 客户端上所有用户在使用NFS共享目录时都被限定为一个普通用户； anonuid/anongid 和上面几个选项搭配使用，定义被限定用户的uid和gid； systemctl start nfs; mkdir -p /home/nfs		#创建服务目录；chmod 777 !$				#修改服务权限； exportfs -arv		#使用exportfs命令得新加载；
nfs 客户端 showmount -e 192.168.87.133			#显示挂载信息；mount -t nfs 192.168.87.133:/home/nfs /mnt		#挂载； mount -t nfs -oremount,nfsvers=3 192.168.87.133:/home/nfs /mnt;NFS 4版本会有该问题：客户端挂载共享目录后，不管是root用户还是普通用户，创建新文件时属主、属组为nobody；
mysql 主从；vi /etc/my.cnf #添加以下语句；server-id=149	#id可以自己设置，跟从机器要不一样；log_bin=main		#配置binlog的名字，可自定义，配置后在数据目录里，生成main前缀的文件，恢复数据的重要文件；service mysqld restart   #重启服务；使数据库数据相同；主：grant reload, super, replication slave, replication client on *.* to 'repli'@'192.168.87.150' identified by 'password'; flush tables with read lock;  #关闭所有打开的表，同时对于所有数据库中的表都加一个读锁，直到显示地执行unlock tables，该操作常常用于数据备份的时候；运行后只能读操作，不能写； show master status;		#需要记录File和Position信息；开始主从同步的状态点；从：vi /etc/my.cnf #添加以下语句；  server-id=150 #id可以自己设置，跟从机器要不一样；  service mysqld restart   #重启服务；stop slave;   #重启后slave会启动（之前已经启动slave的情况下)，必须要stop，再做以下的连接主库的操作，不能做两次slave；change master to master_host='192.168.87.149', master_user='repl', master_password='password', master_log_file='main.000001', master_log_pos=3225820; #将数据库设置从主数据库的状态点开始建立同步，需要用户信息，从主数据库获取的File和Position信息用在这里; start slave;       #启动从机的同步；主：unlock tables;   #主库可以重新写操作；主：show slave status\G；
mysql 主从； 主服务器上 的配置项： binlog-do-db= #配置后仅同步指定的库; binlog-ignore-db= #配置后忽略指定库的同步;  从服务器上 的配置项： replicate_do_db= replicate_ignore_db= replicate_do_table= replicate_ignore_table= replicate_wild_do_table= #如aming.%, 支持通配符%; 建议使用wild语句，更精准和灵活； replicate_wild_ignore_table=
mysql 主从； UUID一致；vi /data/mysql/auto.cnf 	#修改UUID的编号，让两台机器的编号不一样；；
mysql 主从； 文章：https://blog.csdn.net/tanyyinyu/article/details/102917838
keepalived ;yum install -y keepalived vi /etc/keepalived/keepalived.conf  #写入以下内容；  global_defs {    notification_email {   #这一部分用于发送通知邮件，可忽略；      aming@aminglinux.com    }    notification_email_from root@aminglinux.com    smtp_server 127.0.0.1    smtp_connect_timeout 30    router_id LVS_DEVEL }  vrrp_script chk_nginx {     script "/usr/local/sbin/check_ng.sh"  #检查服务是否启动的脚本；     interval 3   #检测间隔； }   vrrp_instance VI_1 {  #定义一个虚拟路由；     state MASTER       #当前节点在此此虚拟路由器上的初始状态，只能有一个是MASTER，余下的都应该为BACKUP，启动后根据priority竞选；     interface ens33   #监听的实际网口；     virtual_router_id 51 #组播ID；     priority 100    #主机即本机的权重；     advert_int 1    #发送组播包的间隔时间，默认为1秒;     authentication {  #认证配置；         auth_type PASS         auth_pass aminglinux>com     }     virtual_ipaddress {  #指定漂移地址；         192.168.87.222     }      track_script {             chk_nginx     }  } 
keepalived ; nginx 检查；vi /usr/local/sbin/check_ng.sh  #写入以下内容；  #!/bin/bash #时间变量，用于记录日志 d=`date --date today +%Y%m%d_%H:%M:%S` #计算nginx进程数量 n=`ps -C nginx --no-heading|wc -l` #如果进程为0，则启动nginx，并且再次检测nginx进程数量， #如果还为0，说明nginx无法启动，此时需要关闭keepalived，释放VIP，同时所有BACKUP就收不到MASTER的信息，BACKUP根据优先级获取VIP，提供服务； if [ $n -eq "0" ]; then         systemctl start nginx #安装方式不一样，启动方式不一样；         n2=`ps -C nginx --no-heading|wc -l`         if [ $n2 -eq "0"  ]; then                 echo "$d nginx down,keepalived will stop" >> /var/log/check_ng.log                 systemctl stop keepalived         fi fi  chmod 755 /usr/local/sbin/check_ng.sh  #要修改脚本权限，不然脚本不能使用； systemctl start keepalived  #启动服务；
lvs;nat; yum install -y ipvsadm   #安装ipvsadm;vim /usr/local/sbin/lvs_nat.sh #脚本如下；  #! /bin/bash # director 服务器上开启路由转发功能 echo 1 > /proc/sys/net/ipv4/ip_forward # 关闭icmp的重定向 echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects   #这部分为关闭ICMP重定向，解决了安全和主机负荷的问题； echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects # 注意区分网卡名字，阿铭的两个网卡分别为ens33和ens37 echo 0 > /proc/sys/net/ipv4/conf/ens33/send_redirects echo 0 > /proc/sys/net/ipv4/conf/ens37/send_redirects # director 设置nat防火墙 iptables -t nat -F iptables -t nat -X iptables -t nat -A POSTROUTING -s 192.168.87.0/24  -j MASQUERADE  #开启地址伪装； # director设置ipvsadm IPVSADM='/usr/sbin/ipvsadm' $IPVSADM -C $IPVSADM -A -t 172.16.92.152:80 -s rr #-A增加一个虚拟服务，-t tcp服务，-s 指定调度算法，-p 保持把一个客户的信息发送给后端服务器的时间； $IPVSADM -a -t 172.16.92.152:80 -r 192.168.87.149:80 -m -w 1  #-a增加真实服务器；-r 指定真实服务器IP地址，-m 使用marquerade, -w权重； $IPVSADM -a -t 172.16.92.152:80 -r 192.168.87.150:80 -m -w 1  [root@tanyvlinux3 ~]# bash /usr/local/sbin/lvs_nat.sh 2> ./sh.log #运行本脚本，配置完成；
lvs 实施基础；关闭firewalld ；使用iptables;yum install -y iptables-services.x86_64 systemctl enable iptables systemctl start iptables    #启用iptables; iptables -F         #清空和保存配置； service iptables save setenforce 0
lvs DR; vim /usr/local/sbin/lvs_dr.sh #脚本如下；  #! /bin/bash echo 1 > /proc/sys/net/ipv4/ip_forward  #开启转发； ipv=/usr/sbin/ipvsadm vip=192.168.87.222    #VIP rs1=192.168.87.149    #真实服务器地址； rs2=192.168.87.150    #真实服务器地址； #注意这里的网卡名字 ifdown ens33 ifup ens33 ifconfig ens33:2 $vip broadcast $vip netmask 255.255.255.255 up #配置ens33:2; 子网掩码错误，好处是永远不进行对外通信；up 代表启动； route add -host $vip dev ens33:2  #可省略； $ipv -C $ipv -A -t $vip:8080 -s wrr   #添加虚拟服务； $ipv -a -t $vip:8080 -r $rs1:8080 -g -w 1  #-g  gatewaying(direct routing) $ipv -a -t $vip:8080 -r $rs2:8080 -g -w 1  #shell bash /usr/local/sbin/lvs_nat.sh 2> ./sh.log	#运行本脚本，配置完成；
lvs 查看；ipvsadm -ln；
lvs DR; RS;  vim /usr/local/sbin/lvs_rs.sh  #编缉脚本； #/bin/bash vip=192.168.87.222 #把vip绑定在lo上，是为了实现rs直接把结果返回给客户端； ifdown lo ifup lo ifconfig lo:0 $vip broadcast $vip netmask 255.255.255.255 up #设置lo:0; route add -host $vip dev lo:0  #确保如果请求的目标IP是$VIP，那么让出去的数据包的源地址也显示为$VIP; #以下操作为更改arp内核参数，目的是为了让rs顺利发送mac地址给客户端 #参考文档www.cnblogs.com/lgfeng/archive/2012/10/16/2726308.html echo "1" >/proc/sys/net/ipv4/conf/lo/arp_ignore  #1 - 只回答目标IP地址是来访网络接口本地地址的ARP查询请求; echo "2" >/proc/sys/net/ipv4/conf/lo/arp_announce #2 - 对查询目标使用最适当的本地地址.在此模式下将忽略这个IP数据包的源地址并尝试选择与能与该地址通信的本地地址.首要是选择所有的网络接口的子网中外出访问子网中包含该目标IP地址的本地地址. 如果没有合适的地址被发现,将选择当前的发送网络接口或其他的有可能接受到该ARP回应的网络接口来进行发送; echo "1" >/proc/sys/net/ipv4/conf/all/arp_ignore echo "2" >/proc/sys/net/ipv4/conf/all/arp_announce [root@draft ~]# bash /usr/local/sbin/lvs_rs.sh  #运行脚本，配置完成；
keepalived DR模式；keepalived 配置文件设置 + LVS RS 运行DR模式脚本；https://blog.csdn.net/tanyyinyu/article/details/102965019
shell if ；双条件 ; #! /bin/bash read -p "please input 1-100:" a if [ $a -gt 60 ] && [ $a -lt 80 ];   #等于    if [ $a -gt 60 -a $a -lt 80 ];   ; then     echo "group 2"; else     echo "group 3"; fi
shell if ; 或者；#! /bin/bash echo $1 $2 if [ $1 -gt 5 -o $2 -gt 5 ];  #等于 if [ $1 -gt 5 ] || [ $2 -gt 5 ];  ; then     echo "ok"; else     echo "not ok"; fi
shell if ; 判断；#-r判断文件是否可读；#-f判断是否存在而且为文件；#-d判断是否存在而且为目录； -e判断是否存在； -w判断是否可写； -x判断是否可运行；-z判断变量是否为空 ； -n判断变量是否不为空;-s文件存在并且大小为非0;(())可使用运算符;[]不能使用运算符；如< > == != >= <=;
shell if ; 判断； 例子：           m=`sed -n "$i"p /etc/passwd`;            echo $m            if [ -z "$m" ];    #如果没有双引号，输出就不正常, 空格让这句语句不正常，一般提示太多参数；                 then                    break;            fi
shell 时间；   ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime    # yum -y install kde-l10n-Chinese    #机器要运行一次，之后可以注释掉；   localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8     export LC_ALL=zh_CN.UTF-8    echo 'LANG="zh_CN.UTF-8"' > /etc/locale.conf
echo -e \c 最后不加上换行符号； 在行尾继续写； \f 换行但光标仍旧停留在原来的位置； 阶梯； \n 换行且光标移至行首； 等于回车； \r 光标移至行首，但不换行； 等于退回去，重新开始写一段同容； \t 插入tab； \v 与\f相同； \ 插入\字符；
parted 大容量分区；https://blog.csdn.net/tanyyinyu/article/details/101762303
vmware fusion nat IP地址变化问题 https://www.jianshu.com/p/af179e61ac7f；
seq 1 2 10 ##指定开始值与步长；
shell while; 负载大发邮件脚本；#! /bin/bash while : do    i=`w |head -1 |awk -F "load average: " '{print $2}'|awk -F "." '{print $1}'`    if [ $i -eq 0 ]   #应该改成 $i -ge 10, 负载大时执行；       then         top -bn1 | mail -s "over load" ***@163.com    fi    sleep 10   #可以加到30秒； done
echo -e "567\tkkkk"| while read line ; do echo $line ; echo "##"; done     #标准输入的一行都可以补read捕获；
echo -e "567\nkkkk"| while read line ; do echo $line ; echo "##"; done      #如果换行了，代表输入两次，while循环两次；
shell 数组；https://blog.csdn.net/tanyyinyu/article/details/103179566
shell expect mysqldump 邮件 监控502 代码上线 https://blog.csdn.net/tanyyinyu/article/details/103187848
shell 整合 13台 https://blog.csdn.net/tanyyinyu/article/details/103332597
shell 整合 负载均衡三个wep mycat atlas https://blog.csdn.net/tanyyinyu/article/details/103442905
memcached 默认启动systemctl -f启动调整growth factor ; 有不同大小的chunk，相同大小的chunk组成slab,slab是比较大的，一个slab会由多个page组成(内存分配单位）一个page大小为1M;
memcached lazy expiration get时查看是否过期; LRU最近最少使用，分配给新记录；
memcached 配置文件/etc/sysconfig/memcached
memcached-tool 127.0.0.1:11211 stats #查看状态；curr_items, get hits; incr_hits
memcached; nc tool; yum install nmap-ncat.x86_64;
memcached; echo stats | nc 127.0.0.1 11211; #查看状态
yum install -y libmemcached; memstat --servers=127.0.0.1:11211;#查看状态
memcached; telnet 127.0.0.1 11211 #数据存储；
memcached; 存储；先设置数据格式，flag, 有效期 大小；再输入数据；<command name> <key> <flags> <exptime> <bytes>\r\n <data block>\r\n   注：\r\n在windows下是Enter键       <command name> 可以是set, add, replace delete     set表示按照相应的<key>存储该数据，没有的时候增加，有的时候覆盖      add表示按照相应的<key>添加该数据,但是如果该<key>已经存在则会操作失败      replace表示按照相应的<key>替换数据,但是如果该<key>不存在则操作失败。      <key> 客户端需要保存数据的key     <flags> 是一个17位的无符号的整数(以十进制的方式表示)。    该标志将和需要存储的数据一起存储,并在客户端get数据时返回。 客户端可以将此标志用做特殊用途，此标志对服务器来说是不透明的。      <exptime> 为过期的时间。 若为0表示存储的数据永远不过期(但可被服务器算法：LRU 等替换)。 如果非0(unix时间或者距离此时的秒数),当过期后,服务器可以保证用户得不到该数据(以服务器时间为标准)。      <bytes> 需要存储的字节数，当用户希望存储空数据时<bytes>可以为0      <data block>需要存储的内容，输入完成后，最后客户端需要加上\r\n（直接点击Enter）作为结束标志。  
memcached-tool 127.0.0.1:11211 dump > dump.txt  #备份；nc 127.0.0.1 11211 < dump.txt  #恢复; 设置时间0,长期有效的项目，恢复后就过期了，存的时候最好直接指定时间；重启后再恢复；
php 增加memcache插件；$PHP_PATH/bin/phpize; ./configure --with-php-config=$PHP_PATH/bin/php-config; make ; make install ; php 7要使用比较新的memcahce;
php 插件查询；$PHP_PATH/bin/php -i|grep dir #查询相关目录；grep ini #查询ini信息；-m #查询模块；
php memcahced; pool设置 php_value[session.save_handler] = memcache php_value[session.save_path] = " tcp://127.0.0.1:11211 "
redis 安装； [root@draft src]# wget http://download.redis.io/releases/redis-4.0.1.tar.gz -c [root@draft src]#  tar zxf redis-4.0.1.tar.gz  [root@draft src]# mv redis-4.0.1 redis4 [root@draft src]# cd redis4 [root@draft redis4]# make && make install  #不用configure;
redis 配置文件修改；解压缩目录里的conf文件；daemonize yes; logfile "/var/log/redis.log" ; appendonly yes # 开启aof; dir /data/redis #数据路径；
redis -p /data/redis; redis-server /etc/redis.conf #启动；
redis 数据类型；redis-cli #进入数据界面；string; list 一串串数据，加一个编号加1，先进后出；set 集合，使用集合做交集，并集；sorted set 集合，每个元素是一组数据，一个编号一个值；hash 一个数据 有多对键值；
redis 更多数据操作，安全修改端口；增加密码 vi /etc/redis.conf   #修改配置文件，后启动redis; requirepass password   #增加此语句，增加password; redis-cli -h 127.0.0.1 -p  16000 -a 'password'； 安全设置 vi /etc/redis.conf   #修改配置文件，后启动redis; rename-command CONFIG shezhi   #增加此语句; shezhi get bind   #测试新的命名； 1) "bind" 2) "127.0.0.1"；





